name: Deploy to S3

on:
  workflow_dispatch: # 수동 실행 전용
    inputs:
      version_type:
        description: '버전 타입 (자동 생성 시)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: '사용자 정의 버전 (예: v1.2.0)'
        required: false
        type: string
      auto_version:
        description: '자동 버전 생성'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: '테스트 건너뛰기'
        required: false
        default: false
        type: boolean
      skip_lint:
        description: '린트 검사 건너뛰기'
        required: false
        default: false
        type: boolean

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 태그 생성 및 푸시를 위한 권한
      actions: read    # 액션 실행을 위한 권한
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 태그 생성을 위해 전체 히스토리 가져오기
          fetch-depth: 0
          # 태그 푸시를 위한 토큰 설정
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: pnpm test

      - name: Run linting
        if: ${{ !inputs.skip_lint }}
        run: pnpm lint

      - name: Build application
        run: pnpm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 with Versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 버전 결정
          if [[ "${{ inputs.auto_version }}" == "true" ]]; then
            DEPLOY_ARGS="--auto-version ${{ inputs.version_type }}"
          elif [[ -n "${{ inputs.custom_version }}" ]]; then
            DEPLOY_ARGS="--version ${{ inputs.custom_version }}"
          else
            DEPLOY_ARGS=""
          fi
          
          # GitHub Actions에서 이미 실행한 단계들 건너뛰기
          DEPLOY_ARGS="$DEPLOY_ARGS --skip-tests --skip-lint"
          
          # 배포 실행
          chmod +x ./scripts/deploy.sh
          chmod +x ./scripts/version-utils.sh
          echo "Executing: ./scripts/deploy.sh $DEPLOY_ARGS"
          echo "Current directory: $(pwd)"
          echo "Deploy script exists: $(ls -la ./scripts/deploy.sh)"
          echo "Version utils exists: $(ls -la ./scripts/version-utils.sh)"
          ./scripts/deploy.sh $DEPLOY_ARGS
          
      - name: Deployment Summary
        run: |
          echo "✅ 배포가 완료되었습니다!"
          echo "🎯 배포 타입: 프로덕션"
          
          if [[ "${{ inputs.auto_version }}" == "true" ]]; then
            echo "🏷️ 자동 생성된 ${{ inputs.version_type }} 버전으로 배포"
          elif [[ -n "${{ inputs.custom_version }}" ]]; then
            echo "📦 사용자 지정 버전: ${{ inputs.custom_version }}"
          else
            echo "📦 최신 버전으로 배포"
          fi
          
          echo "🌍 프로덕션 버킷: woo-bottle.com"
          echo "🕒 배포 시간: $(date)"
