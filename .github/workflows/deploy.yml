name: Deploy Static Website to S3

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2 # 본인의 S3 버킷 리전으로 변경
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 'latest'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build and deploy
      run: |
        pnpm build # (선택사항, React/Vue/Angular 프로젝트의 경우)
    
    - name: Generate deployment tag
      run: |
        # 배포 태그 생성 (날짜-시간-커밋해시)
        DEPLOYMENT_TAG="deploy-$(date +%Y%m%d-%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)"
        echo "DEPLOYMENT_TAG=$DEPLOYMENT_TAG" >> $GITHUB_ENV
        echo "Generated deployment tag: $DEPLOYMENT_TAG"
    
    - name: Sync files to S3 bucket
      run: |
        BUCKET="woo-bottle.com"
        DEPLOYMENT_TAG="${{ env.DEPLOYMENT_TAG }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        echo "🚀 배포 시작: $DEPLOYMENT_TAG"
        
        # AWS S3 sync를 사용하여 동기화
        aws s3 sync ./out/ "s3://$BUCKET/" \
          --delete \
          --metadata "deployment=$DEPLOYMENT_TAG,version=$(jq -r .version package.json 2>/dev/null || echo 'unknown'),build-timestamp=$TIMESTAMP"
        
        echo "✅ 배포 완료: $DEPLOYMENT_TAG"
    
    - name: Generate deployment manifest
      run: |
        BUCKET="woo-bottle.com"
        DEPLOYMENT_TAG="${{ env.DEPLOYMENT_TAG }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        MANIFEST_KEY="batch-operations/deploy-manifest-${TIMESTAMP}.csv"
        
        echo "📋 배포 매니페스트 생성 중..."
        
        # 현재 배포된 파일들의 매니페스트 생성
        echo "Bucket,Key,VersionId" > /tmp/deploy_manifest.csv
        
        # 방금 배포된 파일들의 최신 버전 ID 수집
        aws s3api list-objects-v2 --bucket $BUCKET --query "Contents[].Key" --output text | tr '\t' '\n' | while read -r key; do
          if [ -n "$key" ] && [ "$key" != "None" ]; then
            # 최신 버전 ID 가져오기
            VERSION_ID=$(aws s3api list-object-versions --bucket $BUCKET --prefix "$key" --query "Versions[?Key=='$key'] | sort_by(@, &LastModified) | reverse(@) | [0].VersionId" --output text)
            
            if [ -n "$VERSION_ID" ] && [ "$VERSION_ID" != "None" ]; then
              # 메타데이터 확인하여 현재 배포 태그인지 검증
              METADATA=$(aws s3api head-object --bucket "$BUCKET" --key "$key" --version-id "$VERSION_ID" --query "Metadata.deployment" --output text 2>/dev/null || echo "")
              
              if [ "$METADATA" = "$DEPLOYMENT_TAG" ]; then
                echo "$BUCKET,$key,$VERSION_ID" >> /tmp/deploy_manifest.csv
                echo "✅ 매니페스트에 추가: $key (버전: $VERSION_ID)"
              fi
            fi
          fi
        done
        
        # 매니페스트 파일 수 확인
        MANIFEST_SIZE=$(wc -l < /tmp/deploy_manifest.csv)
        if [ $MANIFEST_SIZE -gt 1 ]; then
          echo "📤 배포 매니페스트를 S3에 업로드 중..."
          
          # 매니페스트에 메타데이터 추가하여 업로드
          aws s3 cp /tmp/deploy_manifest.csv s3://$BUCKET/$MANIFEST_KEY \
            --metadata "deployment-tag=$DEPLOYMENT_TAG,manifest-type=deployment,created-by=github-actions,total-files=$((MANIFEST_SIZE - 1)),build-timestamp=$TIMESTAMP"
          
          # 배포 태그 추가
          aws s3api put-object-tagging \
            --bucket "$BUCKET" \
            --key "$MANIFEST_KEY" \
            --tagging "TagSet=[{Key=type,Value=deployment},{Key=deployment-tag,Value=$DEPLOYMENT_TAG},{Key=created-time,Value=$TIMESTAMP}]"
          
          echo "✅ 배포 매니페스트 생성 완료: s3://$BUCKET/$MANIFEST_KEY"
          echo "📊 포함된 파일 수: $((MANIFEST_SIZE - 1))개"
          
          # 매니페스트 분석 정보
          echo "📈 배포 파일 분석:"
          tail -n +2 /tmp/deploy_manifest.csv | cut -d',' -f2 | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -5 | while read count ext; do
            echo "   $ext: $count개"
          done
        else
          echo "⚠️ 배포된 파일이 없어 매니페스트를 생성하지 않습니다."
        fi
        
        # 임시 파일 정리
        rm -f /tmp/deploy_manifest.csv
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"