name: Deploy Static Website to S3

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2 # 본인의 S3 버킷 리전으로 변경
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 'latest'

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build and deploy
      run: |
        pnpm build # (선택사항, React/Vue/Angular 프로젝트의 경우)
    
    - name: Generate deployment tag
      run: |
        # 배포 태그 생성 (날짜-시간-커밋해시)
        DEPLOYMENT_TAG="deploy-$(date +%Y%m%d-%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)"
        echo "DEPLOYMENT_TAG=$DEPLOYMENT_TAG" >> $GITHUB_ENV
        echo "Generated deployment tag: $DEPLOYMENT_TAG"
    
    - name: Sync files to S3 bucket with deployment tags
      run: |
        BUCKET="woo-bottle.com"
        DEPLOYMENT_TAG="${{ env.DEPLOYMENT_TAG }}"
        
        echo "Deploying with tag: $DEPLOYMENT_TAG"
        
        # 먼저 파일들을 업로드하면서 태그를 추가합니다
        find ./out -type f | while read -r file; do
          # 상대 경로로 변환 (./out/ 제거)
          s3_key=${file#./out/}
          
          echo "Uploading: $s3_key with tag: $DEPLOYMENT_TAG"
          
          # 파일 확장자에 따른 Content-Type 설정
          case "$s3_key" in
            *.html) content_type="text/html" ;;
            *.css)  content_type="text/css" ;;
            *.js)   content_type="application/javascript" ;;
            *.json) content_type="application/json" ;;
            *.svg)  content_type="image/svg+xml" ;;
            *.png)  content_type="image/png" ;;
            *.jpg|*.jpeg) content_type="image/jpeg" ;;
            *.ico)  content_type="image/x-icon" ;;
            *)      content_type="binary/octet-stream" ;;
          esac
          
          # 파일 업로드 with 태그
          aws s3 cp "$file" "s3://$BUCKET/$s3_key" \
            --content-type "$content_type" \
            --tagging "deployment=$DEPLOYMENT_TAG"
        done
        
        echo "Deployment completed with tag: $DEPLOYMENT_TAG"
        echo "To rollback this deployment, use tag: $DEPLOYMENT_TAG"
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"