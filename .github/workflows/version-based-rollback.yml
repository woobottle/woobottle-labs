name: Version-Based Rollback

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: '롤백할 배포 버전 (비워두면 바로 이전 버전으로 자동 롤백)'
        required: false
        type: string
      confirm_rollback:
        description: '롤백 확인 (yes 입력 필요)'
        required: true
        type: string

jobs:
  determine-rollback-target:
    runs-on: ubuntu-latest
    if: inputs.confirm_rollback == 'yes'
    outputs:
      target-version: ${{ steps.determine.outputs.target-version }}
      current-version: ${{ steps.determine.outputs.current-version }}
      rollback-type: ${{ steps.determine.outputs.rollback-type }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine Rollback Target
        id: determine
        run: |
          echo "🔍 롤백 대상 결정 중..."
          
          # 현재 버전 조회
          CURRENT_VERSION=""
          if aws s3api head-object --bucket woo-bottle.com --key ".deploy-metadata.json" >/dev/null 2>&1; then
            CURRENT_VERSION=$(aws s3api get-object \
              --bucket woo-bottle.com \
              --key ".deploy-metadata.json" \
              --query 'Body' \
              --output text | jq -r '.deployVersion' 2>/dev/null || echo "unknown")
          fi
          
          if [[ -n "${{ inputs.target_version }}" ]]; then
            # 사용자가 특정 버전 입력
            TARGET_VERSION="${{ inputs.target_version }}"
            ROLLBACK_TYPE="manual"
            echo "🎯 수동 롤백: $TARGET_VERSION"
          else
            # 자동으로 이전 버전 찾기
            echo "🔍 최근 배포 버전들 조회 중..."
            
            # 최근 배포 메타데이터 버전들을 시간순으로 조회
            VERSIONS_INFO=$(aws s3api list-object-versions \
              --bucket woo-bottle.com \
              --prefix ".deploy-metadata.json" \
              --query 'Versions[] | sort_by(@, &LastModified) | reverse(@)' \
              --output json)
            
            if [[ -z "$VERSIONS_INFO" || "$VERSIONS_INFO" == "[]" ]]; then
              echo "❌ 이전 버전을 찾을 수 없습니다!"
              exit 1
            fi
            
            # 현재가 아닌 가장 최근 이전 버전 찾기
            TARGET_VERSION=""
            echo "$VERSIONS_INFO" | jq -r '.[].VersionId' | while read version_id; do
              if [[ -n "$version_id" && "$version_id" != "null" ]]; then
                DEPLOY_VERSION=$(aws s3api get-object \
                  --bucket woo-bottle.com \
                  --key ".deploy-metadata.json" \
                  --version-id "$version_id" \
                  --query 'Body' \
                  --output text 2>/dev/null | jq -r '.deployVersion' 2>/dev/null || echo "")
                
                if [[ -n "$DEPLOY_VERSION" && "$DEPLOY_VERSION" != "$CURRENT_VERSION" && "$DEPLOY_VERSION" != "null" ]]; then
                  echo "FOUND_TARGET=$DEPLOY_VERSION" >> $GITHUB_ENV
                  break
                fi
              fi
            done
            
            TARGET_VERSION="${FOUND_TARGET:-}"
            
            if [[ -z "$TARGET_VERSION" ]]; then
              echo "❌ 롤백할 이전 버전을 찾을 수 없습니다!"
              echo "현재 버전: $CURRENT_VERSION"
              exit 1
            fi
            
            ROLLBACK_TYPE="automatic"
            echo "⚡ 자동 롤백: $TARGET_VERSION (이전 버전)"
          fi
          
          if [[ "$TARGET_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "❌ 롤백 대상 버전이 현재 버전과 동일합니다!"
            echo "현재: $CURRENT_VERSION, 대상: $TARGET_VERSION"
            exit 1
          fi
          
          echo "target-version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "rollback-type=$ROLLBACK_TYPE" >> $GITHUB_OUTPUT
          
          echo "📋 롤백 정보:"
          echo "  현재 버전: $CURRENT_VERSION"
          echo "  대상 버전: $TARGET_VERSION"
          echo "  롤백 타입: $ROLLBACK_TYPE"

  rollback:
    runs-on: ubuntu-latest
    needs: determine-rollback-target
    if: inputs.confirm_rollback == 'yes'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Target Version
        run: |
          TARGET_VERSION="${{ needs.determine-rollback-target.outputs.target-version }}"
          
          echo "🔍 버전 $TARGET_VERSION 검증 중..."
          
          # 해당 버전으로 태그된 객체들이 있는지 확인
          OBJECTS=$(aws s3api list-objects-v2 \
            --bucket woo-bottle.com \
            --query 'Contents[?!starts_with(Key, `.`)].Key' \
            --output text)
          
          FOUND_OBJECTS=""
          FOUND_COUNT=0
          
          for obj in $OBJECTS; do
            if [[ -n "$obj" ]]; then
              TAGS=$(aws s3api get-object-tagging \
                --bucket woo-bottle.com \
                --key "$obj" \
                --query 'TagSet[?Key==`DeployVersion`].Value' \
                --output text 2>/dev/null || echo "")
              
              if [[ "$TAGS" == "$TARGET_VERSION" ]]; then
                FOUND_OBJECTS="$FOUND_OBJECTS $obj"
                ((FOUND_COUNT++))
              fi
            fi
          done
          
          if [[ $FOUND_COUNT -eq 0 ]]; then
            echo "❌ 버전 $TARGET_VERSION을 찾을 수 없습니다!"
            echo ""
            echo "💡 사용 가능한 최근 버전들:"
            aws s3api list-object-versions \
              --bucket woo-bottle.com \
              --prefix ".deploy-metadata.json" \
              --query 'Versions[?IsLatest==`false`] | [0:5].[LastModified]' \
              --output table
            exit 1
          fi
          
          echo "✅ 버전 $TARGET_VERSION 발견: $FOUND_COUNT개 객체"
          echo "FOUND_OBJECTS=$FOUND_OBJECTS" >> $GITHUB_ENV
          echo "FOUND_COUNT=$FOUND_COUNT" >> $GITHUB_ENV

      - name: Backup Current Version
        run: |
          BACKUP_TIME=$(date +%Y%m%d_%H%M%S)
          CURRENT_VERSION="${{ needs.determine-rollback-target.outputs.current-version }}"
          
          echo "💾 현재 버전 백업 중: $CURRENT_VERSION"
          
          # 현재 버전을 백업 폴더로 복사
          aws s3 sync s3://woo-bottle.com/ s3://woo-bottle.com/.backups/backup_${CURRENT_VERSION}_$BACKUP_TIME/ \
            --exclude ".backups/*" \
            --exclude ".deploy-metadata.json"
          
          echo "✅ 백업 완료: .backups/backup_${CURRENT_VERSION}_$BACKUP_TIME/"

      - name: Execute Rollback
        run: |
          TARGET_VERSION="${{ needs.determine-rollback-target.outputs.target-version }}"
          
          echo "🔄 버전 $TARGET_VERSION으로 롤백 실행 중..."
          
          RESTORED_COUNT=0
          
          # 해당 버전의 각 객체를 현재 버전으로 복원
          for obj in $FOUND_OBJECTS; do
            if [[ -n "$obj" ]]; then
              echo "📄 복원 중: $obj"
              
              # 해당 객체의 모든 버전을 조회하여 올바른 버전 찾기
              aws s3api list-object-versions \
                --bucket woo-bottle.com \
                --prefix "$obj" \
                --query 'Versions[].[VersionId,LastModified]' \
                --output text | \
              while read version_id last_modified; do
                if [[ -n "$version_id" && "$version_id" != "null" ]]; then
                  # 각 버전의 태그 확인
                  TAGS=$(aws s3api get-object-tagging \
                    --bucket woo-bottle.com \
                    --key "$obj" \
                    --version-id "$version_id" \
                    --query 'TagSet[?Key==`DeployVersion`].Value' \
                    --output text 2>/dev/null || echo "")
                  
                  if [[ "$TAGS" == "$TARGET_VERSION" ]]; then
                    echo "  ✅ 복원: $obj (버전: $version_id)"
                    # 해당 버전을 현재 버전으로 복사
                    aws s3api copy-object \
                      --bucket woo-bottle.com \
                      --copy-source "woo-bottle.com/$obj?versionId=$version_id" \
                      --key "$obj" >/dev/null
                    break
                  fi
                fi
              done
              
              ((RESTORED_COUNT++))
            fi
          done
          
          echo "RESTORED_COUNT=$RESTORED_COUNT" >> $GITHUB_ENV
          
          # 롤백된 메타데이터도 복원
          echo "📝 배포 메타데이터 복원 중..."
          aws s3api list-object-versions \
            --bucket woo-bottle.com \
            --prefix ".deploy-metadata.json" \
            --query 'Versions[].[VersionId,LastModified]' \
            --output text | \
          while read version_id last_modified; do
            if [[ -n "$version_id" && "$version_id" != "null" ]]; then
              DEPLOY_VERSION=$(aws s3api get-object \
                --bucket woo-bottle.com \
                --key ".deploy-metadata.json" \
                --version-id "$version_id" \
                --query 'Body' \
                --output text 2>/dev/null | jq -r '.deployVersion' 2>/dev/null || echo "")
              
              if [[ "$DEPLOY_VERSION" == "$TARGET_VERSION" ]]; then
                echo "  ✅ 메타데이터 복원: $DEPLOY_VERSION"
                aws s3api copy-object \
                  --bucket woo-bottle.com \
                  --copy-source "woo-bottle.com/.deploy-metadata.json?versionId=$version_id" \
                  --key ".deploy-metadata.json" >/dev/null
                break
              fi
            fi
          done

      - name: CloudFront cache invalidation
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Rollback Summary
        run: |
          TARGET_VERSION="${{ needs.determine-rollback-target.outputs.target-version }}"
          CURRENT_VERSION="${{ needs.determine-rollback-target.outputs.current-version }}"
          ROLLBACK_TYPE="${{ needs.determine-rollback-target.outputs.rollback-type }}"
          
          if [[ "$ROLLBACK_TYPE" == "automatic" ]]; then
            ROLLBACK_DESC="⚡ **자동 롤백** (바로 이전 버전)"
          else
            ROLLBACK_DESC="🎯 **수동 롤백** (지정된 버전)"
          fi
          
          # 롤백된 메타데이터 조회
          ROLLBACK_INFO=""
          if aws s3api head-object --bucket woo-bottle.com --key ".deploy-metadata.json" >/dev/null 2>&1; then
            ROLLBACK_INFO=$(aws s3api get-object \
              --bucket woo-bottle.com \
              --key ".deploy-metadata.json" \
              --query 'Body' \
              --output text 2>/dev/null | jq -r '.deployTime + " by " + .deployedBy' 2>/dev/null || echo "정보 없음")
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🔄 롤백 완료
          
          $ROLLBACK_DESC
          
          | 항목 | 값 |
          |------|-----|
          | 🔙 **이전 버전** | \`$CURRENT_VERSION\` |
          | ✅ **현재 버전** | \`$TARGET_VERSION\` |
          | 🌍 **URL** | [https://woo-bottle.com](https://woo-bottle.com) |
          | 📅 **롤백 시간** | $(date) |
          | 👤 **롤백 실행자** | ${{ github.actor }} |
          | 📝 **복원된 파일** | ${RESTORED_COUNT}개 |
          | 📋 **원본 배포 정보** | $ROLLBACK_INFO |
          
          ### ✅ 롤백이 완료되었습니다!
          사이트를 확인해보세요: https://woo-bottle.com
          
          ### 🔄 다시 롤백이 필요한 경우
          - **빠른 롤백**: target_version을 비워두고 실행
          - **특정 버전**: 원하는 버전을 입력하고 실행
          - **되돌리기**: 백업된 \`$CURRENT_VERSION\`으로 롤백
          
          ### 💾 백업 위치
          S3 경로: \`s3://woo-bottle.com/.backups/backup_${CURRENT_VERSION}_$(date +%Y%m%d_%H%M%S)/\`
          EOF

  show-versions:
    runs-on: ubuntu-latest
    if: inputs.confirm_rollback != 'yes'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Show Available Versions
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 📋 사용 가능한 배포 버전들
          
          | 배포 시간 | 버전 | 커밋 | 배포자 | 상태 |
          |----------|------|------|--------|------|
          EOF
          
          # 현재 버전 확인
          CURRENT_VERSION=""
          if aws s3api head-object --bucket woo-bottle.com --key ".deploy-metadata.json" >/dev/null 2>&1; then
            CURRENT_VERSION=$(aws s3api get-object \
              --bucket woo-bottle.com \
              --key ".deploy-metadata.json" \
              --query 'Body' \
              --output text | jq -r '.deployVersion' 2>/dev/null || echo "unknown")
          fi
          
          # 최근 배포 메타데이터들 조회
          aws s3api list-object-versions \
            --bucket woo-bottle.com \
            --prefix ".deploy-metadata.json" \
            --query 'Versions[] | sort_by(@, &LastModified) | reverse(@) | [0:10].[VersionId,LastModified]' \
            --output text | \
          while read version_id last_modified; do
            if [[ -n "$version_id" && "$version_id" != "null" ]]; then
              METADATA=$(aws s3api get-object \
                --bucket woo-bottle.com \
                --key ".deploy-metadata.json" \
                --version-id "$version_id" \
                --query 'Body' \
                --output text 2>/dev/null)
              
              if [[ -n "$METADATA" ]]; then
                DEPLOY_VERSION=$(echo "$METADATA" | jq -r '.deployVersion' 2>/dev/null || echo "unknown")
                DEPLOY_TIME=$(echo "$METADATA" | jq -r '.deployTime' 2>/dev/null || echo "unknown")
                GIT_COMMIT=$(echo "$METADATA" | jq -r '.gitCommitShort' 2>/dev/null || echo "unknown")
                DEPLOYED_BY=$(echo "$METADATA" | jq -r '.deployedBy' 2>/dev/null || echo "unknown")
                
                if [[ "$DEPLOY_VERSION" == "$CURRENT_VERSION" ]]; then
                  STATUS="🟢 현재"
                else
                  STATUS="🔵 이전"
                fi
                
                echo "| $DEPLOY_TIME | \`$DEPLOY_VERSION\` | \`$GIT_COMMIT\` | $DEPLOYED_BY | $STATUS |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ### 🔄 롤백 방법
          
          #### 1️⃣ 빠른 롤백 (바로 이전 버전)
          - `target_version`: **비워둠**
          - `confirm_rollback`: `yes`
          - ✨ 가장 간단하고 빠른 방법
          
          #### 2️⃣ 특정 버전 롤백
          - `target_version`: 위 표에서 원하는 버전 복사 (예: `run-120-abc1234`)
          - `confirm_rollback`: `yes`
          - 🎯 정확한 버전으로 롤백
          
          #### 3️⃣ 버전 확인만
          - `confirm_rollback`: `yes` 외의 값 (예: `no`)
          - 📋 롤백하지 않고 버전 목록만 확인
          
          ### ⚠️ 주의사항
          - 롤백 전 현재 버전이 자동으로 백업됩니다
          - S3 객체 버저닝을 통해 안전하게 복원됩니다
          - CloudFront 사용 시 캐시 무효화가 자동 실행됩니다
          EOF
          
          echo ""
          echo "❌ 롤백 확인란에 'yes'를 입력해주세요."

  # 롤백 실패 시 알림
  rollback-failed:
    runs-on: ubuntu-latest
    if: failure() || (inputs.confirm_rollback == 'yes' && needs.determine-rollback-target.result == 'failure')
    steps:
      - name: Rollback failed notification
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## ❌ 롤백 실패
          
          롤백 중 오류가 발생했습니다. 다음을 확인해주세요:
          
          ### 🔍 확인 사항
          1. **AWS 권한**: S3 읽기/쓰기 권한 확인
          2. **버전 존재**: 지정한 버전이 실제로 존재하는지 확인
          3. **네트워크**: AWS API 연결 상태 확인
          
          ### 🛠️ 수동 복구 방법
          AWS CLI를 사용하여 수동으로 복구할 수 있습니다:
          
          ```bash
          # 1. 사용 가능한 버전 확인
          aws s3api list-object-versions --bucket woo-bottle.com --prefix ".deploy-metadata.json"
          
          # 2. 특정 버전의 파일들 복원
          aws s3api copy-object \
            --bucket woo-bottle.com \
            --copy-source "woo-bottle.com/index.html?versionId=YOUR_VERSION_ID" \
            --key "index.html"
          ```
          
          ### 📞 지원
          문제가 지속되면 개발팀에 문의하거나 GitHub Issues를 생성해주세요.
          EOF
          
          echo "❌ 롤백이 실패했습니다!"
          echo "🔧 수동으로 확인이 필요합니다."
