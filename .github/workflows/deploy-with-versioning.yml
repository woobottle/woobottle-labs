name: Deploy with Version Tracking

on:
  workflow_dispatch:
    inputs:
      skip_tests:
        description: '테스트 건너뛰기 (emergency only)'
        required: false
        default: false
        type: boolean
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy-version: ${{ steps.version.outputs.version }}
      deploy-url: ${{ steps.summary.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        if: inputs.skip_tests != true
        run: pnpm test

      - name: Run linting
        if: inputs.skip_tests != true
        run: pnpm lint

      - name: Generate Deployment Version
        id: version
        run: |
          # 고유 버전 생성: run-번호-커밋해시
          VERSION="run-${{ github.run_number }}-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ 배포 버전: $VERSION"

      - name: Build application
        run: pnpm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Enable S3 Versioning and Deploy
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "🔧 S3 버켓 버저닝 활성화 중..."
          
          # S3 버저닝 활성화
          aws s3api put-bucket-versioning \
            --bucket woo-bottle.com \
            --versioning-configuration Status=Enabled
          
          # 라이프사이클 정책 설정 (선택사항: 이전 버전 관리)
          aws s3api put-bucket-lifecycle-configuration \
            --bucket woo-bottle.com \
            --lifecycle-configuration '{
              "Rules": [{
                "ID": "version-management",
                "Status": "Enabled",
                "Filter": {"Prefix": ""},
                "NoncurrentVersionExpiration": {"NoncurrentDays": 30},
                "AbortIncompleteMultipartUpload": {"DaysAfterInitiation": 7}
              }]
            }'
          
          echo "🚀 S3에 배포 중: $VERSION"
          
          # S3 업로드 (버저닝이 활성화되어 자동으로 버전 관리됨)
          aws s3 sync ./out s3://woo-bottle.com/ \
            --delete \
            --cache-control "public, max-age=3600" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # HTML과 JSON 파일은 별도 캐시 설정
          aws s3 sync ./out s3://woo-bottle.com/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --include "*.html" \
            --include "*.json"
          
          echo "📋 배포된 파일들의 버전 ID 수집 중..."
          
          # 주요 파일들의 버전 ID 수집
          VERSION_IDS_FILE="version-ids.json"
          echo "{" > $VERSION_IDS_FILE
          echo '  "deployVersion": "'$VERSION'",' >> $VERSION_IDS_FILE
          echo '  "deployTime": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",' >> $VERSION_IDS_FILE
          echo '  "files": {' >> $VERSION_IDS_FILE
          
          FIRST=true
          for file in "index.html" "404.html" "favicon.ico" "_next/static/css/*.css" "_next/static/js/*.js"; do
            if aws s3api head-object --bucket woo-bottle.com --key "$file" --output json 2>/dev/null; then
              VERSION_ID=$(aws s3api head-object --bucket woo-bottle.com --key "$file" --query 'VersionId' --output text)
              if [[ $VERSION_ID != "null" && $VERSION_ID != "None" ]]; then
                if [[ $FIRST == "false" ]]; then
                  echo "," >> $VERSION_IDS_FILE
                fi
                echo '    "'$file'": "'$VERSION_ID'"' >> $VERSION_IDS_FILE
                FIRST=false
                echo "  📄 $file: $VERSION_ID"
              fi
            fi
          done
          
          echo "" >> $VERSION_IDS_FILE
          echo "  }" >> $VERSION_IDS_FILE
          echo "}" >> $VERSION_IDS_FILE

      - name: Store Deployment Version History
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "📝 배포 버전 히스토리 저장 중..."
          
          # 기존 배포 히스토리 다운로드
          HISTORY_FILE="deploy-history.json"
          if aws s3api head-object --bucket woo-bottle.com --key ".deploy-history.json" 2>/dev/null; then
            aws s3 cp s3://woo-bottle.com/.deploy-history.json $HISTORY_FILE || echo "[]" > $HISTORY_FILE
          else
            echo "[]" > $HISTORY_FILE
          fi
          
          # 현재 배포 정보 추가
          CURRENT_DEPLOY=$(cat << EOF
          {
            "deployVersion": "$VERSION",
            "deployTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployTimestamp": $(date +%s),
            "gitCommit": "$(git rev-parse HEAD)",
            "gitCommitShort": "$(git rev-parse --short HEAD)",
            "gitBranch": "$(git rev-parse --abbrev-ref HEAD)",
            "gitCommitMessage": "$(git log -1 --pretty=%B | head -n1 | sed 's/"/\\"/g')",
            "workflowRun": "${{ github.run_id }}",
            "workflowUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "deployedBy": "${{ github.actor }}",
            "buildNumber": ${{ github.run_number }},
            "repository": "${{ github.repository }}",
            "environment": "production",
            "s3VersionIds": $(cat version-ids.json | jq '.files // {}')
          }
          EOF
          )
          
          # 기존 히스토리에 현재 배포 추가 (최대 50개 유지)
          NEW_HISTORY=$(jq --argjson current "$CURRENT_DEPLOY" '. + [$current] | sort_by(.deployTimestamp) | reverse | .[0:50]' $HISTORY_FILE)
          echo "$NEW_HISTORY" > $HISTORY_FILE
          
          # 배포 히스토리를 S3에 업로드
          aws s3 cp $HISTORY_FILE s3://woo-bottle.com/.deploy-history.json \
            --content-type "application/json" \
            --cache-control "no-cache"
          
          # 현재 배포 메타데이터 업로드
          echo "$CURRENT_DEPLOY" > current-deploy.json
          aws s3 cp current-deploy.json s3://woo-bottle.com/.current-deploy.json \
            --content-type "application/json" \
            --cache-control "no-cache"
          
          echo "✅ 배포 히스토리 업데이트 완료"
          echo "📊 총 배포 기록: $(echo "$NEW_HISTORY" | jq length)개"

      - name: Configure S3 website hosting
        run: |
          echo "🌐 S3 웹사이트 호스팅 설정 중..."
          
          # 웹사이트 설정
          aws s3api put-bucket-website \
            --bucket woo-bottle.com \
            --website-configuration '{
              "IndexDocument": {"Suffix": "index.html"},
              "ErrorDocument": {"Key": "404.html"}
            }'
          
          # 버킷 정책 설정
          aws s3api put-bucket-policy \
            --bucket woo-bottle.com \
            --policy '{
              "Version": "2012-10-17",
              "Statement": [{
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::woo-bottle.com/*"
              }]
            }'

      - name: CloudFront cache invalidation
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deployment Summary
        id: summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          URL="https://woo-bottle.com"
          COMMIT_MSG="$(git log -1 --pretty=%B | head -n1)"
          
          echo "url=$URL" >> $GITHUB_OUTPUT
          
          # GitHub 요약에 표시
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 배포 완료
          
          | 항목 | 값 |
          |------|-----|
          | 🏷️ **배포 버전** | \`$VERSION\` |
          | 🌍 **URL** | [$URL]($URL) |
          | 📅 **배포 시간** | $(date) |
          | 🔗 **워크플로우** | [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
          | 📝 **커밋** | [\`$(git rev-parse --short HEAD)\`](${{ github.server_url }}/${{ github.repository }}/commit/$(git rev-parse HEAD)) |
          | 💬 **커밋 메시지** | $COMMIT_MSG |
          | 👤 **배포자** | ${{ github.actor }} |
          
          ### 🔄 롤백이 필요한 경우
          1. Actions 탭에서 **"S3 Version-Based Rollback"** 워크플로우 실행
          2. **빠른 롤백**: "previous" 타입 선택 (바로 이전 배포로)
          3. **특정 버전**: "specific" 타입 + 배포 버전 입력 (예: \`run-120-abc1234\`)
          4. **시간 기반**: "time_based" 타입 + 시간 입력 (예: \`2024-01-15T10:30:00Z\`)
          
          ### 📊 배포 정보
          - **테스트 실행**: ${{ inputs.skip_tests != true && '✅ 완료' || '⚠️ 건너뜀' }}
          - **파일 수**: $(aws s3api list-objects-v2 --bucket woo-bottle.com --query 'length(Contents)' --output text)개
          - **버전 관리**: ✅ S3 객체 버저닝 활성화
          - **배포 히스토리**: 최대 50개 배포 기록 유지
          EOF

  # 배포 후 알림 (선택사항)
  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "🎉 배포 성공!"
            echo "버전: ${{ needs.deploy.outputs.deploy-version }}"
            echo "URL: ${{ needs.deploy.outputs.deploy-url }}"
          else
            echo "❌ 배포 실패!"
            echo "워크플로우를 확인해주세요: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
