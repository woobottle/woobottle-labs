name: Simplified Rollback

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: '롤백할 버전 (예: v1.0.0)'
        required: true
        type: string
      confirm_rollback:
        description: '롤백 확인 (yes 입력 필요)'
        required: true
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest
    if: inputs.confirm_rollback == 'yes'
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. 롤백 대상 버전 확인
      - name: Verify target version exists
        run: |
          TARGET_VERSION="${{ inputs.target_version }}"
          BUCKET="woo-bottle.com"
          
          echo "🔍 롤백 대상 버전 확인: $TARGET_VERSION"
          
          # 버전 존재 확인
          if ! aws s3 ls "s3://$BUCKET/versions/$TARGET_VERSION/" > /dev/null 2>&1; then
            echo "❌ 버전 $TARGET_VERSION이 존재하지 않습니다!"
            echo "사용 가능한 버전 목록:"
            aws s3 ls "s3://$BUCKET/versions/" --recursive | grep "/$" | awk '{print $4}' | sed 's|versions/||g' | sed 's|/||g' | sort -V
            exit 1
          fi
          
          echo "✅ 버전 $TARGET_VERSION 확인됨"

      # 4. 현재 버전 백업
      - name: Backup current version
        run: |
          BUCKET="woo-bottle.com"
          BACKUP_TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          echo "💾 현재 버전 백업 중..."
          
          # 현재 버전을 백업 폴더로 복사
          aws s3 sync "s3://$BUCKET/current/" "s3://$BUCKET/backups/pre_rollback_$BACKUP_TIMESTAMP/" \
            --exclude "deploy-info.json"
          
          echo "✅ 현재 버전이 backups/pre_rollback_$BACKUP_TIMESTAMP/에 백업되었습니다"

      # 5. 롤백 실행
      - name: Execute rollback
        run: |
          TARGET_VERSION="${{ inputs.target_version }}"
          BUCKET="woo-bottle.com"
          
          echo "🔄 롤백 실행 중: $TARGET_VERSION"
          
          # 지정된 버전을 current로 복사
          aws s3 sync "s3://$BUCKET/versions/$TARGET_VERSION/" "s3://$BUCKET/current/" \
            --delete \
            --cache-control "max-age=86400"
          
          # 루트에도 복사
          aws s3 sync "s3://$BUCKET/versions/$TARGET_VERSION/" "s3://$BUCKET/" \
            --delete \
            --cache-control "max-age=86400" \
            --exclude "versions/*" \
            --exclude "backups/*"
          
          echo "✅ 롤백 완료: $TARGET_VERSION"

      # 6. 롤백 메타데이터 생성
      - name: Create rollback metadata
        run: |
          TARGET_VERSION="${{ inputs.target_version }}"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # 롤백 메타데이터 생성
          cat > rollback-info.json << EOF
          {
            "rollback_version": "$TARGET_VERSION",
            "rollback_timestamp": "$TIMESTAMP",
            "rollback_by": "${{ github.actor }}",
            "rollback_reason": "Manual rollback via GitHub Actions",
            "original_deployment_info": "See versions/$TARGET_VERSION/deploy-info.json",
            "rollback_workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          
          # S3에 업로드
          aws s3 cp rollback-info.json s3://woo-bottle.com/rollback-info.json \
            --content-type "application/json" \
            --cache-control "no-cache"
          
          aws s3 cp rollback-info.json s3://woo-bottle.com/current/rollback-info.json \
            --content-type "application/json" \
            --cache-control "no-cache"

      # 7. CloudFront 무효화 (선택사항)
      - name: Invalidate CloudFront
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 8. 롤백 결과 확인
      - name: Verify rollback
        run: |
          TARGET_VERSION="${{ inputs.target_version }}"
          BUCKET="woo-bottle.com"
          
          echo "🔍 롤백 결과 확인 중..."
          
          # 현재 배포된 버전 정보 확인
          if aws s3 cp "s3://$BUCKET/current/version.json" - 2>/dev/null; then
            echo "✅ 버전 정보 확인됨"
          else
            echo "⚠️ 버전 정보 파일이 없습니다 (정상일 수 있음)"
          fi
          
          echo "✅ 롤백이 성공적으로 완료되었습니다!"
          echo "🏷️ 롤백된 버전: $TARGET_VERSION"
          echo "🌍 URL: https://woo-bottle.com"
          echo "📅 롤백 시간: $(date)"

  # 롤백 실패 시 알림
  rollback-failed:
    runs-on: ubuntu-latest
    if: failure() || inputs.confirm_rollback != 'yes'
    steps:
      - name: Rollback failed notification
        run: |
          if [[ "${{ inputs.confirm_rollback }}" != "yes" ]]; then
            echo "❌ 롤백이 취소되었습니다. 'yes'를 입력해야 합니다."
          else
            echo "❌ 롤백 중 오류가 발생했습니다!"
            echo "🔧 수동으로 확인이 필요합니다."
          fi
