name: Rollback Full Website Deployment

on:
  workflow_dispatch:
    inputs:
      deployment_tag:
        description: 'Rollback할 배포 태그 (예: deploy-20241215-143022-a1b2c3d)'
        required: false
      custom_version:
        description: '특정 버전으로 롤백 (메타데이터의 version 값, 예: v1.2.3)'
        required: false
      rollback_mode:
        description: '롤백 모드 선택'
        required: true
        default: 'tag'
        type: choice
        options:
        - tag
        - version

jobs:
  rollback:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2 # 본인 S3 버킷 리전으로 변경

    - name: Rollback deployment
      run: |
        BUCKET="woo-bottle.com"
        ROLLBACK_MODE="${{ github.event.inputs.rollback_mode }}"
        DEPLOYMENT_TAG="${{ github.event.inputs.deployment_tag }}"
        CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
        
        echo "롤백을 시작합니다."
        echo "롤백 모드: ${ROLLBACK_MODE}"
        
        if [ "$ROLLBACK_MODE" = "tag" ]; then
          if [ -z "$DEPLOYMENT_TAG" ]; then
            echo "❌ 에러: 태그 모드에서는 deployment_tag가 필요합니다."
            exit 1
          fi
          echo "배포 태그: ${DEPLOYMENT_TAG}"
          SEARCH_CRITERIA="deployment"
          SEARCH_VALUE="$DEPLOYMENT_TAG"
        elif [ "$ROLLBACK_MODE" = "version" ]; then
          if [ -z "$CUSTOM_VERSION" ]; then
            echo "❌ 에러: 버전 모드에서는 custom_version이 필요합니다."
            exit 1
          fi
          echo "대상 버전: ${CUSTOM_VERSION}"
          SEARCH_CRITERIA="version"
          SEARCH_VALUE="$CUSTOM_VERSION"
        fi
        
        echo "==================================="
        echo "⚡ 고속 롤백 모드로 대상 파일들을 찾는 중..."
        
        ROLLBACK_COUNT=0
        TEMP_FILE="/tmp/rollback_targets_$$"
        
        # 1단계: 모든 객체와 버전을 한 번에 가져와서 임시 파일에 저장
        echo "📋 S3 객체 목록 수집 중..."
        aws s3api list-object-versions --bucket $BUCKET --output json > /tmp/all_versions_$$.json
        
        # 2단계: jq를 사용해 한 번에 필터링하여 대상 파일들 찾기
        echo "🔍 메타데이터 기반 대상 버전 검색 중..."
        
        # 병렬로 메타데이터 검사할 파일 목록 생성
        jq -r '.Versions[] | select(.IsLatest != true) | "\(.Key)|\(.VersionId)"' /tmp/all_versions_$$.json | head -10000 > $TEMP_FILE
        
        # 3단계: 병렬 처리로 메타데이터 검사 및 롤백
        echo "🚀 병렬 처리로 롤백 실행 중..."
        
        export BUCKET SEARCH_CRITERIA SEARCH_VALUE ROLLBACK_MODE
        
        # 병렬 처리 함수
        process_file() {
          local key_version="$1"
          local key=$(echo "$key_version" | cut -d'|' -f1)
          local version_id=$(echo "$key_version" | cut -d'|' -f2)
          
          # 메타데이터 확인
          METADATA=$(aws s3api head-object --bucket "$BUCKET" --key "$key" --version-id "$version_id" --query "Metadata" --output json 2>/dev/null || echo "{}")
          METADATA_VALUE=$(echo "$METADATA" | jq -r ".\"$SEARCH_CRITERIA\" // empty" 2>/dev/null || echo "")
          
          if [ "$METADATA_VALUE" = "$SEARCH_VALUE" ]; then
            echo "✅ 대상 발견: $key (v:$version_id)"
            
            # 기존 메타데이터 처리
            ORIGINAL_METADATA=$(echo "$METADATA" | jq -r 'to_entries | map("\(.key)=\(.value)") | join(",")')
            ROLLBACK_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            ROLLBACK_METADATA="rollback-timestamp=$ROLLBACK_TIMESTAMP,rolled-back-from=$SEARCH_VALUE,rollback-mode=$ROLLBACK_MODE"
            
            if [ -n "$ORIGINAL_METADATA" ] && [ "$ORIGINAL_METADATA" != "null" ]; then
              FULL_METADATA="$ORIGINAL_METADATA,$ROLLBACK_METADATA"
            else
              FULL_METADATA="$ROLLBACK_METADATA"
            fi
            
            # 고속 롤백 실행
            if aws s3api copy-object \
              --bucket "$BUCKET" \
              --key "$key" \
              --copy-source "$BUCKET/$key?versionId=$version_id" \
              --metadata "$FULL_METADATA" \
              --metadata-directive REPLACE >/dev/null 2>&1; then
              echo "   ⚡ $key 롤백 완료!"
              return 0
            else
              echo "   ❌ $key 롤백 실패"
              return 1
            fi
          fi
          return 2
        }
        
        export -f process_file
        
        # GNU parallel 사용 (없으면 xargs로 폴백)
        if command -v parallel >/dev/null 2>&1; then
          echo "🔥 GNU parallel로 초고속 처리 중..."
          ROLLBACK_COUNT=$(cat $TEMP_FILE | parallel -j 10 process_file | grep -c "롤백 완료")
        else
          echo "⚡ xargs로 병렬 처리 중..."
          ROLLBACK_COUNT=$(cat $TEMP_FILE | xargs -n 1 -P 8 -I {} bash -c 'process_file "{}"' | grep -c "롤백 완료")
        fi
        
        # 임시 파일 정리
        rm -f $TEMP_FILE /tmp/all_versions_$$.json
        
        echo ""
        echo "==================================="
        echo "롤백이 완료되었습니다!"
        echo "롤백 모드: ${ROLLBACK_MODE}"
        if [ "$ROLLBACK_MODE" = "tag" ]; then
          echo "롤백된 배포 태그: ${DEPLOYMENT_TAG}"
        else
          echo "롤백된 버전: ${CUSTOM_VERSION}"
        fi
        echo "처리된 파일 수: ${ROLLBACK_COUNT}"
        echo "==================================="
    
    - name: Invalidate CloudFront cache after rollback
      run: |
        echo "CloudFront 캐시를 무효화하는 중..."
        aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        echo "CloudFront 캐시 무효화가 완료되었습니다."