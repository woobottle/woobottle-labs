name: Rollback Deployment

on:
  workflow_dispatch: # 수동 실행 전용
    inputs:
      rollback_version:
        description: '롤백할 버전 (예: v1.0.1)'
        required: true
        type: string
      environment:
        description: '롤백 환경'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  rollback:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Rollback Version
        run: |
          # 버전 형식 확인
          if [[ ! "${{ inputs.rollback_version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ 유효하지 않은 버전 형식: ${{ inputs.rollback_version }}"
            echo "올바른 형식: v1.0.0"
            exit 1
          fi
          
          # 환경별 버킷 설정
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            TARGET_BUCKET="woo-bottle-staging.com"
          else
            TARGET_BUCKET="woo-bottle.com"
          fi
          
          # 버전 존재 확인
          if ! aws s3 ls "s3://$TARGET_BUCKET/versions/${{ inputs.rollback_version }}/" &>/dev/null; then
            echo "❌ 버전 ${{ inputs.rollback_version }}이 ${{ inputs.environment }} 환경에 존재하지 않습니다!"
            echo "사용 가능한 버전:"
            aws s3 ls "s3://$TARGET_BUCKET/versions/" | grep "PRE" | awk '{print $2}' | sed 's/\///g' | sort -V
            exit 1
          fi
          
          echo "✅ 롤백 버전 ${{ inputs.rollback_version }} 확인됨"

      - name: Execute Rollback
        run: |
          # 롤백 스크립트 실행 권한 부여
          chmod +x ./scripts/rollback.sh
          
          # 환경별 옵션 설정
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            ROLLBACK_ARGS="--staging"
          else
            ROLLBACK_ARGS=""
          fi
          
          # 롤백 실행
          ./scripts/rollback.sh --version ${{ inputs.rollback_version }} $ROLLBACK_ARGS

      - name: Rollback Summary
        run: |
          echo "✅ 롤백이 완료되었습니다!"
          echo "🔄 롤백 버전: ${{ inputs.rollback_version }}"
          echo "🎯 환경: ${{ inputs.environment }}"
          
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "🌍 스테이징 버킷: woo-bottle-staging.com"
            echo "🔗 스테이징 URL: https://woo-bottle-staging.com.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com"
          else
            echo "🌍 프로덕션 버킷: woo-bottle.com"
            if [[ -n "${{ secrets.DEPLOYMENT_URL }}" ]]; then
              echo "🔗 프로덕션 URL: ${{ secrets.DEPLOYMENT_URL }}"
            else
              echo "🔗 프로덕션 URL: https://woo-bottle.com.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com"
            fi
          fi
          
          echo "🕒 롤백 시간: $(date)"
          echo "💾 백업: 자동으로 생성됨 (backups/ 폴더)"

      - name: Create Rollback Issue
        if: inputs.environment == 'production'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 프로덕션 롤백 알림: ${{ inputs.rollback_version }}`,
              body: `## 🔄 프로덕션 롤백 완료
              
              **롤백 정보:**
              - 🏷️ 롤백 버전: ${{ inputs.rollback_version }}
              - 🕒 롤백 시간: ${new Date().toISOString()}
              - 🤖 실행자: ${{ github.actor }}
              - 🔗 워크플로우: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              **백업 정보:**
              - 💾 이전 버전이 자동으로 백업되었습니다
              - 📍 백업 위치: S3 버킷의 backups/ 폴더
              
              **다음 단계:**
              - [ ] 롤백된 버전이 정상 작동하는지 확인
              - [ ] 필요시 추가 조치 계획 수립
              - [ ] 롤백 원인 분석 및 문서화
              
              cc: @${{ github.actor }}`,
              labels: ['rollback', 'production', 'urgent']
            });
            
            console.log('롤백 이슈가 생성되었습니다:', issue.html_url);
