name: View Deployment History

on:
  workflow_dispatch:
    inputs:
      history_limit:
        description: '조회할 배포 기록 수 (기본값: 10)'
        required: false
        default: '10'
        type: string
      show_details:
        description: '상세 정보 표시'
        required: false
        default: true
        type: boolean

jobs:
  show-history:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Deployment History
        run: |
          echo "📥 배포 히스토리 다운로드 중..."
          
          if aws s3api head-object --bucket woo-bottle.com --key ".deploy-history.json" 2>/dev/null; then
            aws s3 cp s3://woo-bottle.com/.deploy-history.json deploy-history.json
            echo "✅ 배포 히스토리 다운로드 완료"
          else
            echo "❌ 배포 히스토리를 찾을 수 없습니다."
            echo "[]" > deploy-history.json
          fi
          
          # 현재 배포 정보도 다운로드
          if aws s3api head-object --bucket woo-bottle.com --key ".current-deploy.json" 2>/dev/null; then
            aws s3 cp s3://woo-bottle.com/.current-deploy.json current-deploy.json
            echo "✅ 현재 배포 정보 다운로드 완료"
          else
            echo "⚠️ 현재 배포 정보를 찾을 수 없습니다."
            echo "{}" > current-deploy.json
          fi

      - name: Display Deployment History
        run: |
          LIMIT="${{ inputs.history_limit }}"
          SHOW_DETAILS="${{ inputs.show_details }}"
          
          echo "📊 배포 히스토리 (최근 $LIMIT 개)"
          echo "================================"
          
          # 현재 배포 정보
          CURRENT_VERSION=$(jq -r '.deployVersion // "unknown"' current-deploy.json)
          CURRENT_TIME=$(jq -r '.deployTime // "unknown"' current-deploy.json)
          IS_ROLLBACK=$(jq -r '.isRollback // false' current-deploy.json)
          
          echo "🚀 **현재 배포**: $CURRENT_VERSION"
          if [[ "$IS_ROLLBACK" == "true" ]]; then
            ROLLBACK_TIME=$(jq -r '.rolledBackAt // "unknown"' current-deploy.json)
            ROLLBACK_BY=$(jq -r '.rolledBackBy // "unknown"' current-deploy.json)
            echo "   ↳ 🔄 롤백됨 ($ROLLBACK_TIME by $ROLLBACK_BY)"
          fi
          echo ""
          
          # 배포 히스토리 표시
          TOTAL_DEPLOYS=$(jq length deploy-history.json)
          echo "📈 총 배포 기록: $TOTAL_DEPLOYS 개"
          echo ""
          
          if [[ $TOTAL_DEPLOYS -eq 0 ]]; then
            echo "배포 기록이 없습니다."
            exit 0
          fi
          
          # GitHub Summary에 표시할 내용 준비
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 📊 배포 히스토리
          
          ### 🚀 현재 배포
          - **버전**: \`$CURRENT_VERSION\`
          - **시간**: $CURRENT_TIME
          EOF
          
          if [[ "$IS_ROLLBACK" == "true" ]]; then
            ROLLBACK_TIME=$(jq -r '.rolledBackAt // "unknown"' current-deploy.json)
            ROLLBACK_BY=$(jq -r '.rolledBackBy // "unknown"' current-deploy.json)
            echo "- **상태**: 🔄 롤백됨 ($ROLLBACK_TIME by $ROLLBACK_BY)" >> $GITHUB_STEP_SUMMARY
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ### 📋 최근 배포 기록 (최근 $LIMIT 개)
          
          | 순번 | 버전 | 배포 시간 | 커밋 | 배포자 | 액션 |
          |------|------|-----------|------|--------|------|
          EOF
          
          # 배포 기록을 테이블 형태로 출력
          jq -r --argjson limit "$LIMIT" '
            .[:$limit] | 
            to_entries[] | 
            [
              (.key + 1), 
              .value.deployVersion, 
              .value.deployTime, 
              .value.gitCommitShort, 
              .value.deployedBy,
              if (.value.deployVersion == "'$CURRENT_VERSION'") then "🟢 현재" else "⚪" end
            ] | 
            @tsv
          ' deploy-history.json | while IFS=$'\t' read -r num version time commit deployer status; do
            echo "| $num | \`$version\` | $time | \`$commit\` | $deployer | $status |" >> $GITHUB_STEP_SUMMARY
            echo "$num. $version ($time) by $deployer $status"
          done

      - name: Show Detailed Information
        if: inputs.show_details == true
        run: |
          echo ""
          echo "📋 상세 정보"
          echo "============"
          
          LIMIT="${{ inputs.history_limit }}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ### 📋 상세 배포 정보
          
          EOF
          
          jq -r --argjson limit "$LIMIT" '
            .[:$limit] | 
            to_entries[] | 
            "#### " + (.key + 1 | tostring) + ". " + .value.deployVersion + "\n" +
            "- **배포 시간**: " + .value.deployTime + "\n" +
            "- **Git 커밋**: [`" + .value.gitCommitShort + "`](https://github.com/${{ github.repository }}/commit/" + .value.gitCommit + ")\n" +
            "- **커밋 메시지**: " + (.value.gitCommitMessage // "N/A") + "\n" +
            "- **배포자**: " + .value.deployedBy + "\n" +
            "- **빌드 번호**: " + (.value.buildNumber | tostring) + "\n" +
            "- **워크플로우**: [#" + (.value.buildNumber | tostring) + "](" + .value.workflowUrl + ")\n" +
            (if .value.s3VersionIds then "- **S3 버전 관리**: ✅ 활성화" else "- **S3 버전 관리**: ⚠️ 레거시" end) + "\n"
          ' deploy-history.json >> $GITHUB_STEP_SUMMARY

      - name: Show Rollback Options
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ### 🔄 롤백 옵션
          
          원하는 버전으로 롤백하려면:
          
          1. **Actions** 탭으로 이동
          2. **"S3 Version-Based Rollback"** 워크플로우 선택
          3. **"Run workflow"** 클릭
          4. 롤백 타입 선택:
             - **previous**: 바로 이전 배포로 롤백
             - **specific**: 특정 버전으로 롤백 (위 목록에서 버전 복사)
             - **time_based**: 특정 시간 이후 첫 배포로 롤백
          5. 확인을 위해 **"ROLLBACK"** 입력
          6. 워크플로우 실행
          
          ### 🔍 S3 버저닝 상태
          - **버저닝**: ✅ 활성화됨
          - **라이프사이클**: 30일 후 이전 버전 자동 삭제
          - **히스토리 보관**: 최대 50개 배포 기록
          
          ### ⚠️ 주의사항
          - 롤백 전 현재 상태가 자동으로 백업됩니다
          - CloudFront 캐시 무효화로 인해 변경사항 반영에 몇 분 소요될 수 있습니다
          - 문제 발생 시 언제든 다시 롤백하거나 새로 배포할 수 있습니다
          EOF
          
          echo "✅ 배포 히스토리 조회 완료"
